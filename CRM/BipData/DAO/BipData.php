<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2016                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2016
 *
 * Generated from xml/schema/CRM/BipData/BipData.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
class CRM_BipData_DAO_BipData extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   */
  static $_tableName = 'civicrm_bipdata';
  /**
   * static instance to hold the field values
   *
   * @var array
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Unique BipData ID
   *
   * @var int unsigned
   */
  public $id;
  /**
   * BIP_BBL
   *
   * @var int
   */
  public $bip_bbl;
  /**
   *
   *
   * @var string
   */
  public $address;
  /**
   *
   * @var int
   */
  public $res_unit;
  /**
   *
   * @var int
   */
  public $tot_unit;
  /**
   *
   * @var int
   */
  public $num_floors;
  /**
   *
   * @var float
   */
  public $census_tract;
  /**
   *
   * @var float
   */
  public $BOROCODE;
  /**
   *
   * @var int
   */
  public $BLOCK;
  /**
   *
   * @var int
   */
  public $LOT;
  /**
   *
   * @var int
   */
  public $COMMDIST;
  /**
   *
   * @var string
   */
  public $LUCATEGORY;
  /**
   *
   * @var datetime
   */
  public $year_built;
  /**
   *
   * @var int
   */
  public $yr_1st_alt;
  /**
   *
   * @var int
   */
  public $yr_2nd_alt;
  /**
   *
   * @var
   */
  public $bldg_class;
  /**
   *
   * @var
   */
  public $zoning_gen;
  /**
   *
   * @var
   */
  public $zoning;
  /**
   *
   * @var
   */
  public $Open_Violations;
  /**
   *
   * @var
   */
  public $Open_A_Violations;
  /**
   *
   * @var
   */
  public $Open_B_Violations;
  /**
   *
   * @var
   */
  public $Open_C_Violations;
  /**
   *
   * @var
   */
  public $PriorYear_Violations;
  /**
   *
   * @var
   */
  public $PriorYear_A_Violations;
  /**
   *
   * @var
   */
  public $PriorYear_B_Violations;
  /**
   *
   * @var
   */
  public $PriorYear_C_Violations;
  /**
   *
   * @var
   */
  public $Seven_A;
  /**
   *
   * @var
   */
  public $AEP;
  /**
   *
   * @var
   */
  public $PPI;
  /**
   *
   * @var
   */
  public $Underlying_Conditions;
  /**
   *
   * @var
   */
  public $NYC_421A_Exempt_Properties;
  /**
   *
   * @var
   */
  public $PriorYear_311_Comps;
  /**
   *
   * @var
   */
  public $dob_violation;
  /**
   *
   * @var
   */
  public $ecb_violation;
  /**
   *
   * @var
   */
  public $city_lien;
  /**
   *
   * @var
   */
  public $Water;
  /**
   *
   * @var
   */
  public $Umbrella;
  /**
   *
   * @var
   */
  public $party_name;
  /**
   *
   * @var
   */
  public $document_type;
  /**
   *
   * @var
   */
  public $recorded_filed;
  /**
   *
   * @var
   */
  public $Absolute;
  /**
   *
   * @var
   */
  public $Per_Unit;
  /**
   *
   * @var
   */
  public $Current_BIP_Score;
  /**
   *
   * @var
   */
  public $Score_2015April;
  /**
   *
   * @var
   */
  public $Score_2015Jan;
  /**
   *
   * @var
   */
  public $Score_2014Oct;
  /**
   *
   * @var
   */
  public $Score_2014Jun;
  /**
   *
   * @var
   */
  public $Score_2014Feb;
  /**
   *
   * @var
   */
  public $Score_2013Nov;
  /**
   *
   * @var
   */
  public $Score_2013Aug;
  /**
   *
   * @var
   */
  public $Score_2013April;
  /**
   *
   * @var
   */
  public $Score_2012Nov;
  /**
   *
   * @var
   */
  public $Score_2012June;
  /**
   *
   * @var
   */
  public $Score_2012Jan;
  /**
   *
   * @var
   */
  public $Score_2010_2;
  /**
   *
   * @var
   */
  public $Score_2010_1;
  /**
   *
   * @var
   */
  public $Score_2009_2;
  /**
   *
   * @var
   */
  public $Score_2009_1;
  /**
   *
   * @var
   */
  public $Score_2008_2;
  /**
   *
   * @var
   */
  public $Occurance;
  /**
   *
   * @var
   */
  public $Average;
  /**
   *
   * @var
   */
  public $CDFAvg;
  /**
   *
   * @var
   */
  public $CorpName;
  /**
   *
   * @var
   */
  public $CorpStreet;
  /**
   *
   * @var
   */
  public $CorpApt;
  /**
   *
   * @var
   */
  public $CorpCity;
  /**
   *
   * @var
   */
  public $CorpState;
  /**
   *
   * @var
   */
  public $IndivFirstName;
  /**
   *
   * @var
   */
  public $IndivLastName;
  /**
   *
   * @var
   */
  public $IndivStreet;
  /**
   *
   * @var
   */
  public $IndivApt;
  /**
   *
   * @var
   */
  public $IndivCity;
  /**
   *
   * @var
   */
  public $IndivSt;
  /**
   *
   * @var
   */
  public $HeadOffTitle;
  /**
   *
   * @var
   */
  public $HeadOffFirstName;
  /**
   *
   * @var
   */
  public $HeadOffLastName;
  /**
   *
   * @var
   */
  public $HeadOffStreet;
  /**
   *
   * @var
   */
  public $HeadOffCity;
  /**
   *
   * @var
   */
  public $HeadOffSt;
  /**
   *
   * @var
   */
  public $MngmtCorp;
  /**
   *
   * @var
   */
  public $MngmtFirstName;
  /**
   *
   * @var
   */
  public $MngmtLastName;
  /**
   *
   * @var
   */
  public $MngmtStreetNum;
  /**
   *
   * @var
   */
  public $MngmtStreet;
  /**
   *
   * @var
   */
  public $MngmtApt;
  /**
   *
   * @var
   */
  public $MngmtCity;
  /**
   *
   * @var
   */
  public $MngmtSt;
  /**
   *
   * @var
   */
  public $Violations_Current_As_Of;
  /**
   *
   * @var
   */
  public $HeadOffApt;
  /**
   *
   * @var
   */
  public $CorpStreetNum;
  /**
   *
   * @var
   */
  public $HeadOffStreetNum;
  /**
   *
   * @var
   */
  public $ERPs;
  /**
   *
   * @var
   */
  public $SoldLiensOpen;
  /**
   *
   * @var
   */
  public $Open_I_Violations;
  /**
   *
   * @var
   */
  public $PriorYear_V_to_C_Ratio;
  /**
   *
   * @var
   */
  public $IndivStreetNum;
  /**
   *
   * @var
   */
  public $HeadOffZip;
  /**
   *
   * @var
   */
  public $IndivZip;
  /**
   *
   * @var
   */
  public $doc_amount;
  /**
   *
   * @var
   */
  public $CorpZip;
  /**
   *
   * @var
   */
  public $MngmtZip;
  /**
   *
   * @var
   */
  public $zip_code;
  /**
   * class constructor
   *
   * @return civicrm_bipdata
   */
  function __construct()
  {
    $this->__table = 'civicrm_bipdata';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Bip Data ID') ,
          'description' => 'Unique BipData ID',
          'required' => true,
          'import' => true,
          'where' => 'civicrm_bipdata.id',
          'headerPattern' => '/internal|bip_data?|id$/i',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'res_unit' => array(
          'name' => 'res_unit',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('res_unit') ,
          'import' => true,
          'where' => 'civicrm_bipdata.res_unit',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'bip_bbl' => array(
          'name' => 'bip_bbl',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('BIP BBL') ,
          'import' => true,
          'where' => 'civicrm_bipdata.bip_bbl',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'address' => array(
          'name' => 'address',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('address') ,
          'import' => true,
          'where' => 'civicrm_bipdata.address',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'tot_unit' => array(
          'name' => 'tot_unit',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('tot_unit') ,
          'import' => true,
          'where' => 'civicrm_bipdata.tot_unit',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'num_floors' => array(
          'name' => 'num_floors',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('num_floors') ,
          'import' => true,
          'where' => 'civicrm_bipdata.num_floors',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'census_tract' => array(
          'name' => 'census_tract',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('census_tract') ,
          'import' => true,
          'where' => 'civicrm_bipdata.census_tract',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'BOROCODE' => array(
          'name' => 'BOROCODE',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('BOROCODE') ,
          'import' => true,
          'where' => 'civicrm_bipdata.BOROCODE',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'BLOCK' => array(
          'name' => 'BLOCK',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('BLOCK') ,
          'import' => true,
          'where' => 'civicrm_bipdata.BLOCK',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'LOT' => array(
          'name' => 'LOT',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('LOT') ,
          'import' => true,
          'where' => 'civicrm_bipdata.LOT',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'COMMDIST' => array(
          'name' => 'COMMDIST',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('COMMDIST') ,
          'import' => true,
          'where' => 'civicrm_bipdata.COMMDIST',
          'headerPattern' => '',
          'dataPattern' => '',
          'export' => true,
        ) ,
        'LUCATEGORY' => array(
          'name' => 'LUCATEGORY',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('LUCATEGORY') ,
        ) ,
        'year_built' => array(
          'name' => 'year_built',
          'type' => CRM_Utils_Type::T_DATE,
          'title' => ts('Year Built') ,
        ) ,
        'yr_1st_alt' => array(
          'name' => 'yr_1st_alt',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Yr 1st Alt') ,
        ) ,
        'yr_2nd_alt' => array(
          'name' => 'yr_2nd_alt',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Yr 2nd alt') ,
        ) ,
        'bldg_class' => array(
          'name' => 'bldg_class',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Building Class') ,
        ) ,
        'zoning_gen' => array(
          'name' => 'zoning_gen',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Zoning Gen') ,
        ) ,
        'zoning' => array(
          'name' => 'zoning',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('zoning') ,
        ) ,
        'Open_Violations' => array(
          'name' => 'Open_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Open Violations') ,
        ) ,
        'Open_A_Violations' => array(
          'name' => 'Open_A_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Open A Violations') ,
        ) ,
        'Open_B_Violations' => array(
          'name' => 'Open_B_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Open_B_Violations') ,
        ) ,
        'Open_C_Violations' => array(
          'name' => 'Open_C_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Open_C_Violations') ,
        ) ,
        'PriorYear_Violations' => array(
          'name' => 'PriorYear_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('PriorYear_Violations') ,
        ) ,
        'PriorYear_A_Violations' => array(
          'name' => 'PriorYear_A_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('PriorYear_A_Violations') ,
        ) ,
        'PriorYear_B_Violations' => array(
          'name' => 'PriorYear_B_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('PriorYear_B_Violations') ,
        ) ,
        'PriorYear_C_Violations' => array(
          'name' => 'PriorYear_C_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('PriorYear_C_Violations') ,
        ) ,
        'Seven_A' => array(
          'name' => 'Seven_A',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Seven_A') ,
        ) ,
        'AEP' => array(
          'name' => 'AEP',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('AEP') ,
        ) ,
        'PPI' => array(
          'name' => 'PPI',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('PPI') ,
        ) ,
        'Underlying_Conditions' => array(
          'name' => 'Underlying_Conditions',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Underlying_Conditions') ,
        ) ,
        'NYC_421A_Exempt_Properties' => array(
          'name' => 'NYC_421A_Exempt_Properties',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('NYC 421A Exempt Properties') ,
        ) ,
        'PriorYear_311_Comps' => array(
          'name' => 'PriorYear_311_Comps',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('PriorYear_311 Comps') ,
        ) ,
        'dob_violation' => array(
          'name' => 'dob_violation',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('dob_violation') ,
        ) ,
        'ecb_violation' => array(
          'name' => 'ecb_violation',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('ecb_violation') ,
        ) ,
        'city_lien' => array(
          'name' => 'city_lien',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('city_lien') ,
        ) ,
        'Water' => array(
          'name' => 'Water',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Water') ,
        ) ,
        'Umbrella' => array(
          'name' => 'Umbrella',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Umbrella') ,
        ) ,
        'party_name' => array(
          'name' => 'party_name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('party_name') ,
        ) ,
        'document_type' => array(
          'name' => 'document_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('document_type') ,
        ) ,
        'recorded_filed' => array(
          'name' => 'recorded_filed',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('recorded_filed') ,
        ) ,
        'Absolute' => array(
          'name' => 'Absolute',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Absolute') ,
        ) ,
        'Per_Unit' => array(
          'name' => 'Per_Unit',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Per Unit') ,
        ) ,
        'Current_BIP_Score' => array(
          'name' => 'Current_BIP_Score',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Current BIP_Score') ,
        ) ,
        'Score_2015April' => array(
          'name' => 'Score_2015April',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2015April') ,
        ) ,
        'Score_2015Jan' => array(
          'name' => 'Score_2015Jan',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2015Jan') ,
        ) ,
        'Score_2014Oct' => array(
          'name' => 'Score_2014Oct',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2014Oct') ,
        ) ,
        'Score_2014Jun' => array(
          'name' => 'Score_2014Jun',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2014Jun') ,
        ) ,
        'Score_2014Feb' => array(
          'name' => 'Score_2014Feb',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2014Feb') ,
        ) ,
        'Score_2013Nov' => array(
          'name' => 'Score_2013Nov',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2013Nov') ,
        ) ,
        'Score_2013Aug' => array(
          'name' => 'Score_2013Aug',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2013Aug') ,
        ) ,
        'Score_2013April' => array(
          'name' => 'Score_2013April',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2013April') ,
        ) ,
        'Score_2012Nov' => array(
          'name' => 'Score_2012Nov',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2012Nov') ,
        ) ,
        'Score_2012June' => array(
          'name' => 'Score_2012June',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2012June') ,
        ) ,
        'Score_2012Jan' => array(
          'name' => 'Score_2012Jan',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2012Jan') ,
        ) ,
        'Score_2010_2' => array(
          'name' => 'Score_2010_2',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2010-2') ,
        ) ,
        'Score_2010_1' => array(
          'name' => 'Score_2010_1',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2010-1') ,
        ) ,
        'Score_2009_2' => array(
          'name' => 'Score_2009_2',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2009-2') ,
        ) ,
        'Score_2009_1' => array(
          'name' => 'Score_2009_1',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2009-1') ,
        ) ,
        'Score_2008_2' => array(
          'name' => 'Score_2008_2',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Score_2008-2') ,
        ) ,
        'Occurance' => array(
          'name' => 'Occurance',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Occurance') ,
        ) ,
        'Average' => array(
          'name' => 'Average',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('Average') ,
        ) ,
        'CDFAvg' => array(
          'name' => 'CDFAvg',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('CDFAvg') ,
        ) ,
        'CorpName' => array(
          'name' => 'CorpName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('CorpName') ,
        ) ,
        'CorpStreet' => array(
          'name' => 'CorpStreet',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('CorpStreet') ,
        ) ,
        'CorpApt' => array(
          'name' => 'CorpApt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('CorpApt') ,
        ) ,
        'CorpCity' => array(
          'name' => 'CorpCity',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('CorpCity') ,
        ) ,
        'CorpState' => array(
          'name' => 'CorpState',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('CorpState') ,
        ) ,
        'IndivFirstName' => array(
          'name' => 'IndivFirstName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivFirstName') ,
        ) ,
        'IndivLastName' => array(
          'name' => 'IndivLastName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivLastName') ,
        ) ,
        'IndivStreet' => array(
          'name' => 'IndivStreet',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivStreet') ,
        ) ,
        'IndivApt' => array(
          'name' => 'IndivApt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivApt') ,
        ) ,
        'IndivCity' => array(
          'name' => 'IndivCity',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivCity') ,
        ) ,
        'IndivSt' => array(
          'name' => 'IndivSt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivSt') ,
        ) ,
        'HeadOffTitle' => array(
          'name' => 'HeadOffTitle',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffTitle') ,
        ) ,
        'HeadOffFirstName' => array(
          'name' => 'HeadOffFirstName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffFirstName') ,
        ) ,
        'HeadOffLastName' => array(
          'name' => 'HeadOffLastName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffLastName') ,
        ) ,
        'HeadOffStreet' => array(
          'name' => 'HeadOffStreet',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffStreet') ,
        ) ,
        'HeadOffCity' => array(
          'name' => 'HeadOffCity',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffCity') ,
        ) ,
        'HeadOffSt' => array(
          'name' => 'HeadOffSt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffSt') ,
        ) ,
        'MngmtCorp' => array(
          'name' => 'MngmtCorp',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtCorp') ,
        ) ,
        'MngmtFirstName' => array(
          'name' => 'MngmtFirstName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtFirstName') ,
        ) ,
        'MngmtLastName' => array(
          'name' => 'MngmtLastName',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtLastName') ,
        ) ,
        'MngmtStreetNum' => array(
          'name' => 'MngmtStreetNum',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtStreetNum') ,
        ) ,
        'MngmtStreet' => array(
          'name' => 'MngmtStreet',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtStreet') ,
        ) ,
        'MngmtApt' => array(
          'name' => 'MngmtApt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtApt') ,
        ) ,
        'MngmtCity' => array(
          'name' => 'MngmtCity',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtCity') ,
        ) ,
        'MngmtSt' => array(
          'name' => 'MngmtSt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('MngmtSt') ,
        ) ,
        'Violations_Current_As_Of' => array(
          'name' => 'Violations_Current_As_Of',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Violations Current As Of') ,
        ) ,
        'HeadOffApt' => array(
          'name' => 'HeadOffApt',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffApt') ,
        ) ,
        'CorpStreetNum' => array(
          'name' => 'CorpStreetNum',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('CorpStreetNum') ,
        ) ,
        'HeadOffStreetNum' => array(
          'name' => 'HeadOffStreetNum',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('HeadOffStreetNum') ,
        ) ,
        'ERPs' => array(
          'name' => 'ERPs',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('ERPs') ,
        ) ,
        'SoldLiensOpen' => array(
          'name' => 'SoldLiensOpen',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('SoldLiensOpen') ,
        ) ,
        'Open_I_Violations' => array(
          'name' => 'Open_I_Violations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Open_I_Violations') ,
        ) ,
        'PriorYear_V_to_C_Ratio' => array(
          'name' => 'PriorYear_V_to_C_Ratio',
          'type' => CRM_Utils_Type::T_FLOAT,
          'title' => ts('PriorYear_V_to_C_Ratio') ,
        ) ,
        'IndivStreetNum' => array(
          'name' => 'IndivStreetNum',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('IndivStreetNum') ,
        ) ,
        'HeadOffZip' => array(
          'name' => 'HeadOffZip',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('HeadOffZip') ,
        ) ,
        'IndivZip' => array(
          'name' => 'IndivZip',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('IndivZip') ,
        ) ,
        'doc_amount' => array(
          'name' => 'doc_amount',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('doc_amount') ,
        ) ,
        'CorpZip' => array(
          'name' => 'CorpZip',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('CorpZip') ,
        ) ,
        'MngmtZip' => array(
          'name' => 'MngmtZip',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('MngmtZip') ,
        ) ,
        'zip_code' => array(
          'name' => 'zip_code',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('zip_code') ,
        ) ,
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'id' => 'id',
        'bip_bbl' => 'bip_bbl',
        'address' => 'address',
        'res_unit' => 'res_unit',
        'tot_unit' => 'tot_unit',
        'num_floors' => 'num_floors',
        'census_tract' => 'census_tract',
        'BOROCODE' => 'BOROCODE',
        'BLOCK' => 'BLOCK',
        'LOT' => 'LOT',
        'COMMDIST' => 'COMMDIST',
        'LUCATEGORY' => 'LUCATEGORY',
        'year_built' => 'year_built',
        'yr_1st_alt' => 'yr_1st_alt',
        'yr_2nd_alt' => 'yr_2nd_alt',
        'bldg_class' => 'bldg_class',
        'zoning_gen' => 'zoning_gen',
        'zoning' => 'zoning',
        'Open_Violations' => 'Open_Violations',
        'Open_A_Violations' => 'Open_A_Violations',
        'Open_B_Violations' => 'Open_B_Violations',
        'Open_C_Violations' => 'Open_C_Violations',
        'PriorYear_Violations' => 'PriorYear_Violations',
        'PriorYear_A_Violations' => 'PriorYear_A_Violations',
        'PriorYear_B_Violations' => 'PriorYear_B_Violations',
        'PriorYear_C_Violations' => 'PriorYear_C_Violations',
        'Seven_A' => 'Seven_A',
        'AEP' => 'AEP',
        'PPI' => 'PPI',
        'Underlying_Conditions' => 'Underlying_Conditions',
        'NYC_421A_Exempt_Properties' => 'NYC_421A_Exempt_Properties',
        'PriorYear_311_Comps' => 'PriorYear_311_Comps',
        'dob_violation' => 'dob_violation',
        'ecb_violation' => 'ecb_violation',
        'city_lien' => 'city_lien',
        'Water' => 'Water',
        'Umbrella' => 'Umbrella',
        'party_name' => 'party_name',
        'document_type' => 'document_type',
        'recorded_filed' => 'recorded_filed',
        'Absolute' => 'Absolute',
        'Per_Unit' => 'Per_Unit',
        'Current_BIP_Score' => 'Current_BIP_Score',
        'Score_2015April' => 'Score_2015April',
        'Score_2015Jan' => 'Score_2015Jan',
        'Score_2014Oct' => 'Score_2014Oct',
        'Score_2014Jun' => 'Score_2014Jun',
        'Score_2014Feb' => 'Score_2014Feb',
        'Score_2013Nov' => 'Score_2013Nov',
        'Score_2013Aug' => 'Score_2013Aug',
        'Score_2013April' => 'Score_2013April',
        'Score_2012Nov' => 'Score_2012Nov',
        'Score_2012June' => 'Score_2012June',
        'Score_2012Jan' => 'Score_2012Jan',
        'Score_2010_2' => 'Score_2010_2',
        'Score_2010_1' => 'Score_2010_1',
        'Score_2009_2' => 'Score_2009_2',
        'Score_2009_1' => 'Score_2009_1',
        'Score_2008_2' => 'Score_2008_2',
        'Occurance' => 'Occurance',
        'Average' => 'Average',
        'CDFAvg' => 'CDFAvg',
        'CorpName' => 'CorpName',
        'CorpStreet' => 'CorpStreet',
        'CorpApt' => 'CorpApt',
        'CorpCity' => 'CorpCity',
        'CorpState' => 'CorpState',
        'IndivFirstName' => 'IndivFirstName',
        'IndivLastName' => 'IndivLastName',
        'IndivStreet' => 'IndivStreet',
        'IndivApt' => 'IndivApt',
        'IndivCity' => 'IndivCity',
        'IndivSt' => 'IndivSt',
        'HeadOffTitle' => 'HeadOffTitle',
        'HeadOffFirstName' => 'HeadOffFirstName',
        'HeadOffLastName' => 'HeadOffLastName',
        'HeadOffStreet' => 'HeadOffStreet',
        'HeadOffCity' => 'HeadOffCity',
        'HeadOffSt' => 'HeadOffSt',
        'MngmtCorp' => 'MngmtCorp',
        'MngmtFirstName' => 'MngmtFirstName',
        'MngmtLastName' => 'MngmtLastName',
        'MngmtStreetNum' => 'MngmtStreetNum',
        'MngmtStreet' => 'MngmtStreet',
        'MngmtApt' => 'MngmtApt',
        'MngmtCity' => 'MngmtCity',
        'MngmtSt' => 'MngmtSt',
        'Violations_Current_As_Of' => 'Violations_Current_As_Of',
        'HeadOffApt' => 'HeadOffApt',
        'CorpStreetNum' => 'CorpStreetNum',
        'HeadOffStreetNum' => 'HeadOffStreetNum',
        'ERPs' => 'ERPs',
        'SoldLiensOpen' => 'SoldLiensOpen',
        'Open_I_Violations' => 'Open_I_Violations',
        'PriorYear_V_to_C_Ratio' => 'PriorYear_V_to_C_Ratio',
        'IndivStreetNum' => 'IndivStreetNum',
        'HeadOffZip' => 'HeadOffZip',
        'IndivZip' => 'IndivZip',
        'doc_amount' => 'doc_amount',
        'CorpZip' => 'CorpZip',
        'MngmtZip' => 'MngmtZip',
        'zip_code' => 'zip_code',
      );
    }
    return self::$_fieldKeys;
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import['bipdata'] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export['bipdata'] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}
